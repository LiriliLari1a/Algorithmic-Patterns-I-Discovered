# 문제
N이 주어지면 N자릿수의 0 부터 9가 모두 포함된 계단수의 개수를 구한다.
0으로 시작하는 수는 계단수가 아니다.

# 설명
Range-Based Inclusion-Exclusion DP (RIE-DP) 는 비트 마스킹 없이 비트마스킹보다 약 50배 빠른 속도로 위의 문제를 풀이한다.
기본적인 계단 문제에서 전체 집합에서 부분집합을 빼서 구했다.

(A, B) 가 "A와 B 사이의 수로 등장하는 경우의 수" 라고 했을때
result = (0, 9) - (1, 9) - (0, 8) + (1, 8) 이다.

모두 연속된 수이므로 중간에서 3이나 5 같은 수가 단독으로 빠지진 않으므로 위의 식은 성립한다.
상세한 시간 복잡도는
               비트마스킹DP     RIE-DP
시간복잡도     O(N * 1024)      O(N * 36)
공간복잡도     O(N * 10240)     O(N * 36)

정도로 차이난다.


전체코드
```python
def RIE(N):
  # DP 계산 함수
  def calculate(matrix):
    n = len(matrix[0])
    for i in range(1, N):
      for j in range(n):
        result = (matrix[i - 1][j - 1] if j > 0 else 0) + (matrix[i - 1][j + 1] if j < n - 1 else 0)
        matrix[i][j] = result

  # DP 초기화 함수
  def init(matrix):
    for i in range(len(matrix[0])):
      matrix[0][i] = 1

  # DP 테이블 정의
  matrix_all = [[0] * 10 for _ in range(N)]
  mat_1to8 = [[0] * 8 for _ in range(N)]
  mat_0to8 = [[0] * 9 for _ in range(N)]
  mat_1to9 = [[0] * 9 for _ in range(N)]

  # 초기화 및 계산
  init(matrix_all)
  init(mat_1to8)
  init(mat_0to8)
  init(mat_1to9)

  calculate(matrix_all)
  calculate(mat_1to8)
  calculate(mat_0to8)
  calculate(mat_1to9)

  # 포함-배제 원리로 정답 계산
  result = 0
  for i in range(1, 10):  # 0으로 시작하는 계단수 포함 방지
    result += matrix_all[N - 1][i]
  for i in range(8):
    result += mat_1to8[N - 1][i]
  for i in range(1, 9):   # 0으로 시작하는 계단수 포함 방지
    result -= mat_0to8[N - 1][i]
  for i in range(9):
    result -= mat_1to9[N - 1][i]

  return result
