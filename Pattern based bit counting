# 문제
INPUT : 두 수 A, B가 주어진다. (A <= B)
OUTPUT : A, B를 포함한 그 사이에 있는 모든 수를 이진수로 변환했을 때 1의 개수를 모두 찾아 개수를 출력한다.

# 설명
이문제는 보통 비트 자리별로 등장 패턴을 수학적으로 누적하여 구할 수 있다. 
하지만 나는 조금더 수학적 알고리즘을 곁들여 풀어보기로 했다.
문제에서 입력의 범위가 10^16 까지 였는데 시간 복잡도를 일단 log 정도로 바꿔야 시간 내로 풀 수 있다고 생각을했다.
일단 이진수로 변환시 1의 개수가 어떻게 변화하는지 증가하는지 보았다.

값      1의 개수
000000    0
000001    1
000010    1
000011    2
000100    1
000101    2
000110    2
000111    3
001000    1
001001    2
001010    2
001011    3
001100    2
001101    3
001110    3
001111    4
010000    1
010001    2
010010    2
010011    3
010100    2
010101    3
010110    3
010111    4
011000    2
011001    3
011010    3
011011    4
011100    3
011101    4
011110    4
011111    5
100000    1
100001    2
100010    2
100011    3
100100    2
100101    3
100110    3
100111    4
101000    2
101001    3
101010    3
101011    4
101100    3
101101    4
101110    4
101111    5
110000    2
110001    3
110010    3
110011    4
110100    3
110101    3
110110    4
110111    5
111000    3
111001    4
111010    4
111011    5
111100    4
111101    5
111110    5
111111    6

일정한 패턴을 볼 수 있다. 
2개씩 볼 수도 있고(01, 12, 23, 34), 4개씩 볼수도 있고(0112, 1223, 2334), 2^n으로 볼 수도 있다(자릿수의 변화).
2^n의 큰 패턴안에 4개씩의 패턴, 2개씩의 패턴 마치 프랙탈을 보는 것 같은 패턴을 발견할 수 있다.
이제 이를 이용해 log적으로 패턴을 구하여 볼 것이다.

log 적으로 보기 위해서는 2^n 의 패턴을 볼 것이다. [2^n, 2^(n+1)) 의 합을 쭉 구해보면

구간합      범위            식
1        [2^0, 2^1)         1
3        [2^1, 2^2)     1 * 2 + 2^0
8        [2^2, 2^3)     3 * 2 + 2^1
20       [2^3, 2^4)     8 * 2 + 2^2
48       [2^4, 2^5)     20 * 2 + 2^3
112      [2^5, 2^6)     48 * 2 + 2^4

이제, 1부터의 누적합을 구해보면

누적합      범위
1        [2^0, 2^1)
4        [2^0, 2^2)
12       [2^0, 2^3)
32       [2^0, 2^4)
80       [2^0, 2^5)
192      [2^0, 2^6)

이 패턴을 이용해 점화식을 세워 리스트를 작성하였다.

```python
# 구간합
ones = [0] * MAX_bit
ones[0], ones[1] = 1, 1
for i in range(2, MAX_bit):
  ones[i] = ones[i - 1] * 2 + 2 ** (i - 1)
for i in range(1, MAX_bit):
  ones[i] += 2 ** i

# 누적합
perfix = [0] * MAX_bit
perfix[0] = 1
for i in range(1, MAX_bit):
  perfix[i] = perfix[i - 1] + ones[i]
print(perfix)


구간합을 계산했으니 A와 B 사이에있는 구간합은 계산할수 있다.
정확한 조정이 필요하겠지만 일단 A와 B가 어느 범위 [2^n, 2^(n+1)) 에 속해있는지 구했다.

```python
def get_exponent(N):
  exp = 0
  while N >= 2 ** (exp + 1):
    exp += 1
  return exp

exp_A = get_exponent(A)
exp_B = get_exponent(B)


이 함수를 통해 A,B 가 속해있는 exponent 범위를 구할 수 있었다.
그리고 [2^exp_A, 2^exp_B) 구간의 합을 위에 만들었던 리스트에서 꺼내와 더했다.

for i in range(exp_A, exp_B):
  result += ones[i]

이제, 구간에서 더해지지 못한 일정 부분을 더하거나 빼야한다.

```python
offset_a, offset_b = A - 2 ** exp_A, B - 2 ** exp_B + 1


offset 으로 각각 얼마나 조정이 필요한지 구했다.
exponential 하게 자른 범위내의 값이므로 offset의 범위도 클수 있기 때문에 재귀로 계속 exponential 하게 자른다.

```python
def exp_cycle(offset, count):
  bit_range = 0
  offset -= 1
  while offset >= 2 ** (bit_range + 1):
    bit_range += 1
  remain = offset - 2 ** bit_range + 1
  total = perfix[bit_range-1] + count * (2 ** bit_range)
  return total, remain

count_a, count_b = 1, 1
while offset_a > 4:
  total, offset_a  = exp_cycle(offset_a, count)
  count += 1
  result -= total

while offset_b > 4:
  total, offset_b = exp_cycle(offset_b, count)
  count += 1
  result += total
  

만약 offset이 1000일 때 while 문에서 재귀를 할 때마다 범위가 줄어드는데

remain = 1000 - 2^9 = 1000 - 512 = 482
remain = 482 - 2^8 = 482 - 256   = 226
remain = 224 - 2^7 = 224 - 128   = 98
remain = 96 - 2^6 = 98 - 64      = 34
remain = 34 - 2^5 = 34 - 32      = 2

까지 돌게 된다.
이렇게 보면 또다른 패턴을 찾을 수 있는데 재귀를 시작 할때 마다 시작하는 수가 

1000...000
1100...000
1110...000 
1111...000

으로 좌측의 1의 개수가 하나씩 늘어난다. 그래서 count_a, count_b 변수를 추가했고 재귀를 호출할 때마다
좌측에 추가되는 1의 개수를 세어 추가했다.

마지막으로 남은 4 이하의 offset은 계산하는데에 얼마 걸리지 않으므로 직접 계산한다.

```python
for i in range(offset_a):
  result -= (count + bin(i).count('1'))
for i in range(offset_b):
  result += (count + bin(i).count('1'))


이렇게 하면 "Pattern based bit counting" 을 사용할 수있다.
원래의 풀이보다 조금더 패턴과 수학적 기법에 기반한 알고리즘으로 찾기위한 탐색의 범위를 exponent 값으로 줄여나가며 탐색한다.
시간복잡도는 O(log B) 이며 기존의 풀이와 동일하다.


장점 : 시간복잡도가 기존의 풀이와 같고 새로운 수학적, 창의적 풀이법을 제시했으며 이해만 하면 굉장히 직관적인 코드이다.
       이론상 천문학적인 수에 상수시간에 가까운 bit counting을 할 수도 있을 것 같다.
단점 : 구현이 복잡하다. 진짜 근소한 차이지만 기존의 풀이가 조금 더 빠르다.

# 전체코드

```python
def count_ones_in_range(A, B):
  MAX_bit = 55

  # ones[n]에서 2^n ~ 2^(n + 1) - 1 까지의 1의 개수를 구함
  ones = [0] * MAX_bit
  ones[0], ones[1] = 1, 1
  for i in range(2, MAX_bit):
    ones[i] = ones[i - 1] * 2 + 2 ** (i - 1)
  for i in range(1, MAX_bit):
    ones[i] += 2 ** i

  # perfix 에서 누적합을 구함
  perfix = [0] * MAX_bit
  perfix[0] = 1
  for i in range(1, MAX_bit):
    perfix[i] = perfix[i - 1] + ones[i]

    # offset : 범위, count : 좌측에 붙어 있는 1 개수
  def exp_cycle(offset, count):
      bit_range = 0
      offset -= 1   # 100...000 처리
      while offset >= 2 ** (bit_range + 1):
        bit_range += 1
      remain = offset - 2 ** bit_range + 1
      total = perfix[bit_range - 1] + count * (2 ** bit_range)
      return total, remain

  def get_exponent(N):
    exp = 0
    while N >= 2 ** (exp + 1):
      exp += 1
    return exp

  exp_A = get_exponent(A)
  exp_B = get_exponent(B)

  result = 0
  for i in range(exp_A, exp_B):
    result += ones[i]

  offset_a, offset_b = A - 2 ** exp_A, B - 2 ** exp_B + 1

  count = 1
  while offset_a > 4:
    total, offset_a = exp_cycle(offset_a, count)
    count += 1
    result -= total
  for i in range(offset_a):
    result -= (count + bin(i).count('1'))

  count = 1
  while offset_b > 4:
    total, offset_b = exp_cycle(offset_b, count)
    count += 1
    result += total
  for i in range(offset_b):
    result += (count + bin(i).count('1'))

  return result
