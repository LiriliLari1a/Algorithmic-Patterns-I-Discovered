# 문제
첫째 줄에 L1의 양 끝 점 x1, y1, x2, y2가, 둘째 줄에 L2의 양 끝 점 x3, y3, x4, y4가 주어진다.
L1과 L2가 교차하면 1, 아니면 0을 출력한다.

# 설명
선분이 교차하는지 확인 하려면 보통 CCW 벡터 외적을 사용하여 문제를 해결한다. 하지만 나는 조금더 원초적인 수학으로 접근해보았다.
원초적으로 접근하게 되면 생기는 문제가 수많은 케이스에 감당이 안된다는 것이다.
조금 고민해보다가 케이스가 발생하는 기준이 선분의 기울기임을 확인하고 선분의 기울기가 문제면 rotate 시키면 되는것 아닌가 하는 생각을 했다.
그래서 기울기에 상황에 따라 45도, 90도 회전시켜 선분의 교차를 확인했다.


1. 일단 xn < x(n+1) 이 되도록 정렬하는 함수이다.
```python
def sort_loc(x1, y1, x2, y2, x3, y3, x4, y4):
  if (x1, y1) > (x2, y2):
    x1, y1, x2, y2 = x2, y2, x1, y1
  if (x3, y3) > (x4, y4):
    x3, y3, x4, y4 = x4, y4, x3, y3
  return x1, y1, x2, y2, x3, y3, x4, y4


2. 선분이 교차하는지 검사하는 함수이다.
   [a, b] 에서 두 선분의 y값을 비교하여 교차하면 True, 교차하지 않으면 False이다.  양, 음수만 판별하면 되므로 float 부정확성 개선을 위해 분모는 모두 소거했다.
```python
def calculation(x1, y1, x2, y2, x3, y3, x4, y4, a, b):
  if a > b:
    return False
  temp_1 = (y2 - y1) * (a - x1) * (x4 - x3) - (y4 - y3) * (a - x3) * (x2 - x1) + (y1 - y3) * (x2 - x1) * (x4 - x3)
  temp_2 = (y2 - y1) * (b - x1) * (x4 - x3) - (y4 - y3) * (b - x3) * (x2 - x1) + (y1 - y3) * (x2 - x1) * (x4 - x3)
  if temp_1 * temp_2 <= 0:
    return True
  else:
    return False


3. 앞서 만든 calcuation()을 이용하여 결과를 출력하는 함수이다. extent_x에서 두 선분이 겹치는 x 값의 범위를 구한 후 함수를 호출 한다.
```python
def result(x1, y1, x2, y2, x3, y3, x4, y4):
  extent_x = [max(x1, x3), min(x2, x4)]
  if calculation(x1, y1, x2, y2, x3, y3, x4, y4, extent_x[0], extent_x[1]):
    return True
  return False

4. 이제 적당히 rotate 시킨 후 return 하면된다. 
   xDemo와 yDemo 는 기울기의 형태를 판별하기 위한 변수이고 두 선분이 모두 INF 일때와 두 선분의 기울기가 각각 INF와 0일때는 45도 회전,
   한 선분만 기울기가 INF 이면 90도 회전시킨다.
```python
xDemo_1, xDemo_2 = x2 - x1, x4 - x3
yDemo_1, yDemo_2 = y2 - y1, y4 - y3
          
if yDemo_1 == 0 and yDemo_2 == 0 or xDemo_1 == 0 and yDemo_2 == 0 or xDemo_2 == 0 and yDemo_1 == 0:
  x1, y1, x2, y2 = x1 - y1, x1 + y1, x2 - y2, x2 + y2
  x3, y3, x4, y4 = x3 - y3, x3 + y3, x4 - y4, x4 + y4

elif xDemo_1 == 0 or xDemo_2 == 0:
  x1, y1, x2, y2 = y1, -x1, y2, -x2
  x3, y3, x4, y4 = y3, -x3, y4, -x4

x1, y1, x2, y2, x3, y3, x4, y4 = sort_loc(x1, y1, x2, y2, x3, y3, x4, y4)
return(result(x1, y1, x2, y2, x3, y3, x4, y4))


전체코드
```python 
def cross_with_rotation(x1, y1, x2, y2, x3, y3, x4, y4):
  # 기울기 분류를 위한 변수
  xDemo_1, xDemo_2 = x2 - x1, x4 - x3
  yDemo_1, yDemo_2 = y2 - y1, y4 - y3

  # 정렬
  def sort_loc(x1, y1, x2, y2, x3, y3, x4, y4):
    if (x1, y1) > (x2, y2):
      x1, y1, x2, y2 = x2, y2, x1, y1
    if (x3, y3) > (x4, y4):
      x3, y3, x4, y4 = x4, y4, x3, y3
    return x1, y1, x2, y2, x3, y3, x4, y4

  # 계산 함수
  def calculation(x1, y1, x2, y2, x3, y3, x4, y4, a, b):
    if a > b:
      return False
    temp_1 = (y2 - y1) * (a - x1) * (x4 - x3) - (y4 - y3) * (a - x3) * (x2 - x1) + (y1 - y3) * (x2 - x1) * (x4 - x3)
    temp_2 = (y2 - y1) * (b - x1) * (x4 - x3) - (y4 - y3) * (b - x3) * (x2 - x1) + (y1 - y3) * (x2 - x1) * (x4 - x3)
    if temp_1 * temp_2 <= 0:
      return True
    else:
      return False

  # 겹침 판단
  def result(x1, y1, x2, y2, x3, y3, x4, y4):
    extent_x = [max(x1, x3), min(x2, x4)]
    if calculation(x1, y1, x2, y2, x3, y3, x4, y4, extent_x[0], extent_x[1]):
      return True
    return False

  # 두 선분 모두 기울기 = INF 또는 두 선분의 기울기가 각각 INF, 0
  if yDemo_1 == 0 and yDemo_2 == 0 or xDemo_1 == 0 and yDemo_2 == 0 or xDemo_2 == 0 and yDemo_1 == 0:
    x1, y1, x2, y2 = x1 - y1, x1 + y1, x2 - y2, x2 + y2
    x3, y3, x4, y4 = x3 - y3, x3 + y3, x4 - y4, x4 + y4

  # 한 선분만 기울기 INF -> 원점을 기준으로 90도 회전
  elif xDemo_1 == 0 or xDemo_2 == 0:
    x1, y1, x2, y2 = y1, -x1, y2, -x2
    x3, y3, x4, y4 = y3, -x3, y4, -x4

  # 최종 계산
  x1, y1, x2, y2, x3, y3, x4, y4 = sort_loc(x1, y1, x2, y2, x3, y3, x4, y4)
  return(result(x1, y1, x2, y2, x3, y3, x4, y4))



솔직히 벡터외적보다 최적화 되어있다고 말하진 못하겠지만 간단한 계산으로 이루어져 조금 빠른 성능을 기대할 수 있을 것 같다.
발상을 조금 바꾸니 문제가 훨씬 쉬워졌다.
